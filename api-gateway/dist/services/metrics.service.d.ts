export declare class MetricsService {
    private logger;
    private isInitialized;
    private requestCounter;
    private requestDuration;
    private activeRequests;
    private errorCounter;
    private cacheHits;
    private cacheMisses;
    private cacheSize;
    private rateLimitExceeded;
    private rateLimitRemaining;
    private circuitBreakerTrips;
    private circuitBreakerState;
    private dbConnections;
    private dbQueryDuration;
    private dbErrors;
    private redisConnections;
    private redisOperations;
    private redisErrors;
    constructor();
    initialize(): Promise<void>;
    private initializeRequestMetrics;
    private initializeCacheMetrics;
    private initializeRateLimitMetrics;
    private initializeCircuitBreakerMetrics;
    private initializeDatabaseMetrics;
    private initializeRedisMetrics;
    incrementRequest(method: string, path: string, statusCode: number, service?: string): void;
    recordRequestDuration(method: string, path: string, duration: number, service?: string): void;
    setActiveRequests(count: number): void;
    incrementError(type: string, service?: string): void;
    incrementCacheHit(): void;
    incrementCacheMiss(): void;
    setCacheSize(size: number): void;
    incrementRateLimitExceeded(clientId: string, endpoint: string): void;
    setRateLimitRemaining(clientId: string, endpoint: string, remaining: number): void;
    incrementCircuitBreakerTrip(service: string): void;
    setCircuitBreakerState(service: string, state: 'closed' | 'open' | 'half-open'): void;
    setDbConnections(count: number): void;
    recordDbQueryDuration(operation: string, duration: number): void;
    incrementDbError(operation: string): void;
    setRedisConnections(count: number): void;
    incrementRedisOperation(operation: string): void;
    incrementRedisError(operation: string): void;
    getMetrics(): Promise<string>;
    getMetricsAsJson(): Promise<any>;
    shutdown(): Promise<void>;
    isReady(): boolean;
}
//# sourceMappingURL=metrics.service.d.ts.map