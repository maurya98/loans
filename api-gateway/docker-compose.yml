version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: api-gateway-postgres
    environment:
      POSTGRES_DB: api_gateway
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - api-gateway-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: api-gateway-redis
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - api-gateway-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # API Gateway
  api-gateway:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: api-gateway
    environment:
      NODE_ENV: development
      PORT: 3000
      HOST: 0.0.0.0
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: api_gateway
      DB_USER: postgres
      DB_PASSWORD: password
      DB_SSL: false
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: 
      REDIS_DB: 0
      JWT_SECRET: your-super-secret-jwt-key-change-in-production
      JWT_EXPIRES_IN: 24h
      JWT_REFRESH_EXPIRES_IN: 7d
      RATE_LIMIT_WINDOW_MS: 900000
      RATE_LIMIT_MAX_REQUESTS: 100
      RATE_LIMIT_SKIP_SUCCESSFUL_REQUESTS: false
      LOAD_BALANCER_ALGORITHM: round-robin
      HEALTH_CHECK_INTERVAL: 30000
      HEALTH_CHECK_TIMEOUT: 5000
      CIRCUIT_BREAKER_THRESHOLD: 5
      CIRCUIT_BREAKER_TIMEOUT: 60000
      LOG_LEVEL: info
      LOG_FILE_PATH: ./logs/api-gateway.log
      CORS_ORIGIN: http://localhost:3000
      CORS_CREDENTIALS: true
      SWAGGER_TITLE: API Gateway
      SWAGGER_DESCRIPTION: A comprehensive API Gateway built with TypeScript
      SWAGGER_VERSION: 1.0.0
      ENABLE_METRICS: true
      METRICS_PORT: 9090
      BCRYPT_ROUNDS: 12
      SESSION_SECRET: your-session-secret-key
    ports:
      - "3000:3000"
    volumes:
      - ./logs:/app/logs
      - ./src:/app/src
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - api-gateway-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Example User Service (for testing)
  user-service:
    image: node:18-alpine
    container_name: user-service
    working_dir: /app
    command: >
      sh -c "npm install -g http-server &&
             echo '{\"users\": [{\"id\": 1, \"name\": \"John Doe\", \"email\": \"john@example.com\"}]}' > users.json &&
             http-server -p 3001 -c-1"
    ports:
      - "3001:3001"
    networks:
      - api-gateway-network

  # Example Product Service (for testing)
  product-service:
    image: node:18-alpine
    container_name: product-service
    working_dir: /app
    command: >
      sh -c "npm install -g http-server &&
             echo '{\"products\": [{\"id\": 1, \"name\": \"Product 1\", \"price\": 99.99}]}' > products.json &&
             http-server -p 3002 -c-1"
    ports:
      - "3002:3002"
    networks:
      - api-gateway-network

  # Nginx Reverse Proxy (optional)
  nginx:
    image: nginx:alpine
    container_name: api-gateway-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - api-gateway
    networks:
      - api-gateway-network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  api-gateway-network:
    driver: bridge 